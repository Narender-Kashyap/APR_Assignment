# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aQtqQeHppMZkYkDbxt4YYrpzC1gcjCZD
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression

df = pd.read_csv("bank.csv")  # Ensure the CSV file is in the same directory

# Convert target to binary
df['deposit'] = df['deposit'].map({'yes': 1, 'no': 0})

# One-hot encode categorical features
X = pd.get_dummies(df.drop(columns=['deposit']), drop_first=True)
y = df['deposit']

# Train/test split
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42, stratify=y
)

# Scale features
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Train Logistic Regression model
model = LogisticRegression(max_iter=1000)
model.fit(X_train, y_train)

# Function to take user input
def get_user_input():
    print("\n--- Enter Customer Details ---")
    age = int(input("Age: "))
    job = input("Job (admin, blue-collar, entrepreneur, housemaid, management, retired, self-employed, services, student, technician, unemployed, unknown): ")
    marital = input("Marital (married, single, divorced): ")
    education = input("Education (primary, secondary, tertiary, unknown): ")
    default = input("Default Credit? (yes/no): ")
    balance = int(input("Balance: "))
    housing = input("Housing Loan? (yes/no): ")
    loan = input("Personal Loan? (yes/no): ")
    contact = input("Contact Type (cellular, telephone, unknown): ")
    month = input("Month (jan, feb, mar, ... , dec): ")
    day_of_week = input("Day of Week (mon, tue, wed, thu, fri): ")
    campaign = int(input("Number of Contacts in this Campaign: "))
    pdays = int(input("Days since client was last contacted (-1 if never): "))
    previous = int(input("Number of contacts before this campaign: "))
    poutcome = input("Outcome of Previous Campaign (success, failure, other, unknown): ")

    # Create dataframe for input
    user_data = pd.DataFrame({
        "age": [age],
        "job": [job],
        "marital": [marital],
        "education": [education],
        "default": [default],
        "balance": [balance],
        "housing": [housing],
        "loan": [loan],
        "contact": [contact],
        "month": [month],
        "day_of_week": [day_of_week],
        "campaign": [campaign],
        "pdays": [pdays],
        "previous": [previous],
        "poutcome": [poutcome]
    })

    return user_data

# Take user input
user_df = get_user_input()

# One-hot encode using same columns as training
user_encoded = pd.get_dummies(user_df, drop_first=True)

# Align with training data columns
user_encoded = user_encoded.reindex(columns=X.columns, fill_value=0)

# Scale
user_scaled = scaler.transform(user_encoded)

# Prediction
pred = model.predict(user_scaled)[0]
prob = model.predict_proba(user_scaled)[0][1] * 100

print("\n--- Prediction Result ---")
if pred == 1:
    print(f"✅ The customer is likely to SUBSCRIBE. (Probability: {prob:.2f}%)")
else:
    print(f"❌ The customer is NOT likely to subscribe. (Probability: {prob:.2f}%)")

